generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model User {
  id          Int             @id @default(autoincrement())
  username    String          @unique
  fullname    String          @default("users")
  email       String     
  password    String
  roles       UserRole[]
  permissions UserPermission[]
  @@schema("public")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String @unique      
  permissions RolePermission[]
  users       UserRole[]

  @@schema("public")
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles RolePermission[]
  users UserPermission[]

  @@schema("public")
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@schema("public")
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@schema("public")
}

model UserPermission {
  userId       Int
  permissionId Int
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([userId, permissionId])
  @@schema("public")
}

model MempData {
  strprno        String   @id
  strname        String?
  strshift       String?
  strkodegol     String?
  strpos         String?
  strposdesc     String?
  strsect        String?
  strsectdesc    String?
  strsectdisplay String?
  strdept        String?
  strdeptdesc    String?
  strdeptdisplay String?
  strdisplayname String?
  dtcontract1    DateTime?
  dtcontract2    DateTime?
  dtjoin         DateTime?
  dtresign       DateTime?
  dtbirth        DateTime?
  strtype        String?
  dtrenewal      DateTime?
  strrfid        String?

  mealRequests MealRequest[]
  @@map("mempdata")  
  @@schema("public")
}

model MealRequest {
  id           Int       @id @default(autoincrement())
  pr_number    String
  name         String
  section      String?
  shift        String?
  confirmation Boolean   @default(false)

  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  MempData  MempData   @relation(fields: [pr_number], references: [strprno])
  details   MealRequestDetail[]

  @@schema("public")
}

model MealRequestDetail {
  id              Int       @id @default(autoincrement())
  meal_request_id Int
  emp_pr_number   String?
  date            DateTime  @db.Date  
  is_selected     Boolean   @default(false)
  is_taken        Boolean   @default(false)
  taken_at        DateTime?

  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  MealRequest MealRequest @relation(fields: [meal_request_id], references: [id], onDelete: Cascade)

  @@index([meal_request_id])
  @@schema("public")
}


model Guest {
  id            Int       @id @default(autoincrement())
  fullname      String
  id_card       String
  email         String?
  phone         String?
  company       String?
  visit_purpose String?
  visit_date    DateTime?  @db.Date  
  status        String    @default("expected") // expected, checked_in, checked_out, cancelled
  check_in      DateTime?
  check_out     DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@schema("public")
}
